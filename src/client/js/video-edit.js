import "../scss/components/video-edit.scss";

document.addEventListener("DOMContentLoaded", () => {
    const overlayWithLink = document.querySelector("wtcp-overlay-with-link");
    const overlayContainer = overlayWithLink.querySelector(".overlay-container");
    const greyOverlay = overlayContainer.querySelector(".grey-overlay");
    const overlayLinkIcon = overlayContainer.querySelector(".overlay-with-link");
    const overlayLinkAnchor = overlayLinkIcon.querySelector("#overlay-link-to-wetube");
    const videoOverflowMenuButton = document.querySelector("#overflow-menu-button");
    const overflowDialog = document.querySelector("#overflow-menu #dialog");
    const overflowMenuDeleteButton = overflowDialog.querySelector("tp-wt-paper-item[test-id=VIDEO_DELETE]");
    const titleEditOuter = document.querySelector("#title-textarea #outer");
    const titleEditInput = document.querySelector("#title-textarea #textbox");
    const titleEditCharCounter = document.querySelector("#title-textarea .char-counter");
    const titleTextarea = document.querySelector("wtcp-social-suggestions-textbox#title-textarea");
    const titleContainer = titleTextarea.querySelector("#container");
    const descriptionEditOuter = document.querySelector("#description-textarea #outer");
    const descriptionEditInput = document.querySelector("#description-textarea #textbox");
    const descriptionTextarea = document.querySelector("wtcp-social-suggestions-textbox#description-textarea");
    const descriptionContainer = descriptionTextarea.querySelector("#container");
    const descriptionEditCharCounter = document.querySelector("#description-textarea .char-counter");
    const customThumbnailUploader = document.querySelector("wtcp-video-custom-still-editor wtcp-thumbnail-uploader");
    const customThumbnailEditor = document.querySelector("wtcp-video-custom-still-editor wtcp-thumbnail-editor");
    const thumbnailFileLoader = document.querySelector("#file-loader");
    const autogenThumbnailEditor = document.querySelector("wtcp-video-autogenerated-thumbnails-editor");
    const autogenWtcpThumbnailEditor = autogenThumbnailEditor.querySelector("wtcp-thumbnail-editor");
    const thumbnailExperimentEditor = document.querySelector("wtcp-thumbnails-experiment-editor");
    const experimentWtcpThumbnailEditor = thumbnailExperimentEditor.querySelector("wtcp-thumbnail-editor");
    const topbarAccountButton = document.querySelector("button[aria-label=Account]");
    const accountDropdown = document.querySelector(".wtcp-popup-container.account-dropdown");
    const createDialogButton = document.querySelector("wtcp-button[label=만들기]");
    const createDialog = document.querySelector("#creation-menu tp-wt-paper-dialog");
    const videoUploadButton = createDialog.querySelector("#text-item-0");
    const uploadAnchor = videoUploadButton.querySelector("a");
    const discardButton = document.querySelector("#discard");
    const discardButtonShape = discardButton.querySelector("button");
    const saveButton = document.querySelector("#save");
    const saveButtonShape = saveButton.querySelector("button");
    const editForm = document.querySelector("#video-metadata-edit-form");
    const editFromTitleInput = editForm.querySelector("#edited-title-input");
    const editFromDescriptonInput = editForm.querySelector("#edited-description-input");
    const deleteConfirmationDialog = document.querySelector("#delete-dialog tp-wt-paper-dialog");
    const confirmCheckbox = deleteConfirmationDialog.querySelector("#confirm-checkbox");
    const checkboxContainer = confirmCheckbox.querySelector("#checkbox-container");
    const checkbox = checkboxContainer.querySelector("#checkbox");
    const deleteConfirmCancelButton = deleteConfirmationDialog.querySelector("#cancel-button");
    const deleteConfirmButton = deleteConfirmationDialog.querySelector("#confirm-button");
    const deleteConfirmButtonShape = deleteConfirmButton.querySelector("button");
    let IS_VIDEO_OVERFLOW_SHOWING = false;
    let IS_ACCOUNT_DROPDOWN_VISIBLE = false;
    let IS_CREATE_DIALOG_VISIBLE = false;
    let SAVE_BUTTON_ACTIVATED = false;
    let DELETE_CONFIRM_CHECKED = false;
    let initialTitleInputValue, initialDescriptionInputValue;

    function onOverlayContainerMousemove() {
        overlayContainer.setAttribute("tabindex", "-1");
        overlayLinkAnchor.setAttribute("aria-labelledby", "goog_747207242")
        greyOverlay.removeAttribute("hidden");
        overlayLinkIcon.removeAttribute("hidden");
    };  
    function onOverlayContainerMouseleave() {        
        overlayContainer.setAttribute("tabindex", "0");
        overlayLinkAnchor.removeAttribute("aria-labelledby");
        greyOverlay.setAttribute("hidden", "");
        overlayLinkIcon.setAttribute("hidden", "");
    };  
    function onOverlayContainerClick() {
        const destinationUrl = overlayLinkAnchor.getAttribute("src");
        if (!destinationUrl) return;
        window.open(String(destinationUrl), "_blank");
    };

    function videoOverflowMenuToggle() {
        if (IS_VIDEO_OVERFLOW_SHOWING) {
            overflowDialog.removeAttribute("aria-hidden", "true");
            overflowDialog.style.display = "none";
            IS_VIDEO_OVERFLOW_SHOWING = false;
        } else {
            overflowDialog.removeAttribute("aria-hidden");
            overflowDialog.style.display = "";
            overflowDialog.style.position = "fixed";
            overflowDialog.style.boxSizing = "border-box";
            overflowDialog.style.left = `${videoOverflowMenuButton.offsetLeft}`;
            overflowDialog.style.top = `${videoOverflowMenuButton.offsetTop}`;
            overflowDialog.style.maxWidth = "initial";
            overflowDialog.style.maxHeight = "120px";
            overflowDialog.style.zIndex = "2202";
            IS_VIDEO_OVERFLOW_SHOWING = true;
        };
    };

    function onTitleEditOuterClick() {
        titleEditInput.focus();
    };
    function onTitleEditInputFocus() {
        [titleTextarea, titleContainer].forEach((element) => {
            element.setAttribute("focused", "");
        });
    };
    function onTitleEditInputBlur() {
        [titleTextarea, titleContainer].forEach((element) => {
            element.removeAttribute("focused");
        });
    };

    function activateSaveButton() {
        if (!SAVE_BUTTON_ACTIVATED) {
            discardButton.setAttribute("aria-disalbed", "false");
            discardButton.removeAttribute("disabled")
            discardButtonShape.removeAttribute("disabled");
            discardButtonShape.classList.replace("wtcp-button-shape-impl--disabled", "wtcp-button-shape-impl--mono");
            
            saveButton.setAttribute("aria-disalbed", "false");
            saveButton.removeAttribute("disabled")
            saveButtonShape.removeAttribute("disabled");
            saveButtonShape.classList.replace("wtcp-button-shape-impl--disabled", "wtcp-button-shape-impl--mono");
            SAVE_BUTTON_ACTIVATED = true;
        };
    };
    function deactivateSaveButton() {
        if (SAVE_BUTTON_ACTIVATED) {
            discardButton.setAttribute("aria-disalbed", "true");
            discardButton.setAttribute("disabled", "")
            discardButtonShape.setAttribute("disabled", "");
            discardButtonShape.classList.replace("wtcp-button-shape-impl--mono", "wtcp-button-shape-impl--disabled");
            
            saveButton.setAttribute("aria-disalbed", "true");
            saveButton.setAttribute("disabled", "")
            discardButtonShape.setAttribute("disabled", "");
            saveButtonShape.classList.replace("wtcp-button-shape-impl--mono", "wtcp-button-shape-impl--disabled");
            SAVE_BUTTON_ACTIVATED = false;
        };
    };
    function handleTitleEditInputItself() {
        titleEditCharCounter.textContent = `${titleEditInput.textContent.length}/100`;
        editFromTitleInput.value = titleEditInput.textContent;

        if (initialTitleInputValue !== titleEditInput.textContent || initialDescriptionInputValue !== descriptionEditInput.textContent) {
            activateSaveButton();
        } else {
            deactivateSaveButton();
        };
        
        if (!titleEditInput.textContent) {
            [titleTextarea, titleContainer]
            .forEach((element) => {
                element.setAttribute("invalid", "");
            });
            deactivateSaveButton();
        } else {
            [titleTextarea, titleContainer]
            .forEach((element) => {
                element.removeAttribute("invalid");
            });
            activateSaveButton();
        };
    };

    function onDescriptionEditOuterClick() {
        descriptionEditInput.focus();
    };
    function onDescriptionEditInputFocus() {
        [descriptionTextarea, descriptionContainer]
            .forEach((element) => {
                element.setAttribute("focused", "");
            });
    };
    function onDescriptionEditInputBlur() {
        [descriptionTextarea, descriptionContainer]
            .forEach((element) => {
                element.removeAttribute("focused", "");
            });
    };
    function handleDescriptionEditInputItself() {
        descriptionEditCharCounter.textContent = `${descriptionEditInput.textContent.length}/5000`;
        editFromDescriptonInput.value = descriptionEditInput.textContent;

        if (initialTitleInputValue !== titleEditInput.textContent || initialDescriptionInputValue !== descriptionEditInput.textContent) {
            activateSaveButton();
        } else {
            deactivateSaveButton();
        };
    };

    function onThumbnailUploaderMouseenter() {
        customThumbnailUploader.setAttribute("hovered", "");
        customThumbnailEditor.setAttribute("active", "");
        customThumbnailEditor.setAttribute("active-by-page", "");
    };
    function onThumbnailUploaderMouseleave() {
        customThumbnailUploader.removeAttribute("hovered");
        customThumbnailEditor.removeAttribute("active");
        customThumbnailEditor.removeAttribute("active-by-page");
    };

    function onThumbnailUploaderInputActive() {
        thumbnailFileLoader.click();
    };

    function onAutogenThumbnailEditorMouseenter() {
        autogenThumbnailEditor.setAttribute("hovered", "");
        autogenWtcpThumbnailEditor.setAttribute("active", "");
        autogenWtcpThumbnailEditor.setAttribute("active-by-page", "");
    };
    function onAutogenThumbnailEditorMouseleave() {
        autogenThumbnailEditor.removeAttribute("hovered");
        autogenWtcpThumbnailEditor.removeAttribute("active");
        autogenWtcpThumbnailEditor.removeAttribute("active-by-page");
    };

    function onExperimentEditorMousemove() {
        thumbnailExperimentEditor.setAttribute("hovered", "");
        experimentWtcpThumbnailEditor.setAttribute("active", "");
        experimentWtcpThumbnailEditor.setAttribute("active-by-page", "");
    };
    function onExperimentEditorMouseleave() {
        thumbnailExperimentEditor.removeAttribute("hovered");
        experimentWtcpThumbnailEditor.removeAttribute("active");
        experimentWtcpThumbnailEditor.removeAttribute("active-by-page");
    };
    
    function accountDropdownToggle() {
        if (IS_ACCOUNT_DROPDOWN_VISIBLE) {
            accountDropdown.style.display = "none";
            accountDropdown.style.zIndex = "";
            accountDropdown.setAttribute("aria-hidden", "true")
            IS_ACCOUNT_DROPDOWN_VISIBLE = false;
        } else {
            accountDropdown.style.zIndex = "2022";
            accountDropdown.style.display = "";
            accountDropdown.style.position = "fixed";
            accountDropdown.style.left = `${topbarAccountButton.offsetLeft - 286}px`;
            accountDropdown.style.top = `${topbarAccountButton.offsetTop}px`;
            accountDropdown.setAttribute("aria-hidden", "false")
            IS_ACCOUNT_DROPDOWN_VISIBLE = true;
        };
    };

    function createDialogToggle() {
        if (IS_CREATE_DIALOG_VISIBLE) {
            createDialog.style.display = "none";
            createDialog.style.zIndex = "";
            createDialog.setAttribute("aria-hidden", "true");
            IS_CREATE_DIALOG_VISIBLE = false;
        } else {
            createDialog.style.display = "";
            createDialog.style.zIndex = "2022";
            createDialog.style.position = "fixed";
            createDialog.style.left = `${createDialogButton.offsetLeft - createDialog.offsetWidth + createDialogButton.offsetWidth}px`;
            createDialog.style.top = `${createDialogButton.offsetTop + createDialogButton.offsetHeight}px`
            createDialog.setAttribute("aria-hidden", "false");
            IS_CREATE_DIALOG_VISIBLE = true;
        };
    };
    
    function onDiscardButtonClick() {
        titleEditInput.textContent = initialTitleInputValue;
        descriptionEditInput.textContent = initialDescriptionInputValue;

        deactivateSaveButton();
    };
    
    function onOverflowMenuDeleteButtonClick() {
        const deleteDialogWidth = window.innerWidth / 2.67;
        const deleteDialogMinHeight = window.innerHeight / 2.14;
        const deleteDialogMaxHeight = window.innerHeight / 1.15;

        deleteConfirmationDialog.style.display = "";
        deleteConfirmationDialog.style.zIndex = "2202";

        deleteConfirmationDialog.style.minWidth = `${deleteDialogWidth}px`;
        deleteConfirmationDialog.style.maxWidth = `${deleteDialogWidth}px`;
        deleteConfirmationDialog.style.minHeight = `${deleteDialogMinHeight}px`;
        deleteConfirmationDialog.style.maxHeight = `${deleteDialogMaxHeight}px`;

        deleteConfirmationDialog.style.left = `${(window.innerWidth - deleteDialogWidth) / 2}px`;
        deleteConfirmationDialog.style.top = `${(window.innerHeight - deleteDialogMaxHeight) / 2}px`;

        const backdrop = document.createElement("div");
        backdrop.classList.add("popup-host-bevavior-backdrop");
        backdrop.setAttribute("style", "position: fixed; pointer-events: none; inset: 0px; background: rgb(0, 0, 0); opacity: 0.55; z-index: 2201;");
        document.querySelector("#delete-dialog #dialog").insertAdjacentElement("afterend", backdrop);

        const overlayBackdrop = document.createElement("tp-wt-iron-overlay-backdrop");
        overlayBackdrop.setAttribute("style", "opacity: 0; z-index: 2201;");
        overlayBackdrop.classList.add("opened");
        overlayBackdrop.setAttribute("opened", "");
        document.querySelector("wtcp-video-delete-dialog").insertAdjacentElement("afterend", overlayBackdrop);
    };
    function onDeleteConfirmCancelButtonClick() {
        document.querySelector("#delete-dialog .popup-host-bevavior-backdrop").remove();
        document.querySelector("tp-wt-iron-overlay-backdrop[opened]").remove();
        deleteConfirmationDialog.style.display = "none";
        deleteConfirmationDialog.style.zIndex = "";
    };

    function onCheckboxContainerClick() {
        if (DELETE_CONFIRM_CHECKED) {
            confirmCheckbox.setAttribute("aria-checked", "false");
            confirmCheckbox.removeAttribute("checked");

            deleteConfirmButton.setAttribute("aria-disabled", "true");
            deleteConfirmButton.setAttribute("disabled", "");
            deleteConfirmButtonShape.classList.replace("wtcp-button-shape-impl--mono", "wtcp-button-shape-impl--disabled");
            deleteConfirmButtonShape.setAttribute("disabled", "");            

            document.querySelector("#checkmark.wtcp-checkbox-lit").remove();
            DELETE_CONFIRM_CHECKED = false;
        } else {
            confirmCheckbox.setAttribute("aria-checked", "true");
            confirmCheckbox.setAttribute("checked", "");

            deleteConfirmButton.setAttribute("aria-disabled", "false");
            deleteConfirmButton.removeAttribute("disabled");
            deleteConfirmButtonShape.classList.replace("wtcp-button-shape-impl--disabled", "wtcp-button-shape-impl--mono");
            deleteConfirmButtonShape.removeAttribute("disabled");

            const checkmarkElement = document.createElement("div");
            checkmarkElement.setAttribute("id", "checkmark");
            checkmarkElement.setAttribute("class", "standard wtcp-checkbox-lit");
            checkbox.appendChild(checkmarkElement);
            DELETE_CONFIRM_CHECKED = true;
        };
    };

    function toDeleteLink() {
        const currnetUrl = window.location.href;
        const deleteUrl = currnetUrl.replace("/edit", "/delete");
        window.location.href = deleteUrl;
    };










    //some no event listener actions
    (function() {
        // right video player video element size adjust //
        const html5VideoPlayer = document.querySelector("wtcp-html5-video-player");
        const videoContainer = html5VideoPlayer.querySelector("#video-container");
        videoContainer.setAttribute(
            "style",
            `width: ${html5VideoPlayer.offsetWidth}px; height: ${html5VideoPlayer.offsetHeight}px;`
        )

        // set initial textbox input for input difference //
        initialTitleInputValue = titleEditInput.textContent;
        initialDescriptionInputValue = descriptionEditInput.textContent;
        
    })();






    overlayContainer.addEventListener("mousemove", onOverlayContainerMousemove);
    overlayContainer.addEventListener("mouseleave", onOverlayContainerMouseleave);
    overlayContainer.addEventListener("click", onOverlayContainerClick);
    videoOverflowMenuButton.addEventListener("click", videoOverflowMenuToggle);

    titleEditOuter.addEventListener("click", onTitleEditOuterClick);
    titleEditInput.addEventListener("focus", onTitleEditInputFocus)
    titleEditInput.addEventListener("blur", onTitleEditInputBlur)
    titleEditInput.addEventListener("input", handleTitleEditInputItself);
    descriptionEditOuter.addEventListener("click", onDescriptionEditOuterClick);
    descriptionEditInput.addEventListener("focus", onDescriptionEditInputFocus);
    descriptionEditInput.addEventListener("blur", onDescriptionEditInputBlur);
    descriptionEditInput.addEventListener("input", handleDescriptionEditInputItself);

    customThumbnailUploader.addEventListener("mouseenter", onThumbnailUploaderMouseenter);
    customThumbnailUploader.addEventListener("mouseleave", onThumbnailUploaderMouseleave);
    customThumbnailUploader.addEventListener("click", onThumbnailUploaderInputActive);

    autogenThumbnailEditor.addEventListener("mouseenter", onAutogenThumbnailEditorMouseenter);
    autogenThumbnailEditor.addEventListener("mouseleave", onAutogenThumbnailEditorMouseleave);

    thumbnailExperimentEditor.addEventListener("mouseenter", onExperimentEditorMousemove);
    thumbnailExperimentEditor.addEventListener("mouseleave", onExperimentEditorMouseleave);
    
    topbarAccountButton.addEventListener("click", accountDropdownToggle);
    createDialogButton.addEventListener("click", createDialogToggle);
    videoUploadButton.addEventListener("click", () => uploadAnchor.click());

    discardButton.addEventListener("click", onDiscardButtonClick);
    saveButton.addEventListener("click", () => editForm.submit());

    overflowMenuDeleteButton.addEventListener("click", onOverflowMenuDeleteButtonClick);
    deleteConfirmCancelButton.addEventListener("click", onDeleteConfirmCancelButtonClick);

    checkboxContainer.addEventListener("click", onCheckboxContainerClick);

    deleteConfirmButton.addEventListener("click", toDeleteLink);
});